porthole(1) -- Porthole processor
=================================

## SYNOPSIS

    porthole <YAML> <FILE>
    porthole --compile <FILE>
    porthole --tokens <FILE>


## DESCRIPTION

Porthole is a logic-less templating system for HTML, config files,
anything.

The `porthole` command processes a Porthole template preceded by YAML
frontmatter from standard input and prints one or more documents to
standard output.

YAML frontmatter beings with `---` on a single line, followed by YAML,
ending with another `---` on a single line, e.g.

    ---
    names: [ {name: chris}, {name: mark}, {name: scott} ]
    ---

If you are unfamiliar with YAML, it is a superset of JSON. Valid JSON
should work fine.

After the frontmatter should come any valid Porthole template. See
porthole(5) for an overview of Porthole templates.

For example:

    {{#names}}
      Hi {{name}}!
    {{/names}}

Now let's combine them.

    $ cat data.yml
    ---
    names: [ {name: chris}, {name: mark}, {name: scott} ]
    ---

    $ cat template.porthole
    {{#names}}
      Hi {{name}}!
    {{/names}}

    $ cat data.yml template.porthole | porthole
    Hi chris!
    Hi mark!
    Hi scott!

If you provide multiple YAML documents (as delimited by `---`), your
template will be rendered multiple times. Like a mail merge.

For example:

    $ cat data.yml
    ---
    name: chris
    ---
    name: mark
    ---
    name: scott
    ---

    $ cat template.porthole
    Hi {{name}}!

    $ cat data.yml template.porthole | porthole
    Hi chris!
    Hi mark!
    Hi scott!

## OPTIONS

By default `porthole` will try to render a Porthole template using the
YAML frontmatter you provide. It can do a few other things, however.

  * `-c`, `--compile`:
    Print the compiled Ruby version of a given template. This is the
    code that is actually used when rendering a template into a
    string. Useful for debugging but only if you are familiar with
    Porthole's internals.

  * `-t`, `--tokens`:
    Print the tokenized form of a given Porthole template. This can be
    used to understand how Porthole parses a template. The tokens are
    handed to a generator which compiles them into a Ruby
    string. Syntax errors and confused tags, therefor, can probably be
    identified by examining the tokens produced.


## INSTALLATION

If you have RubyGems installed:

    gem install porthole


## EXAMPLES

    $ porthole data.yml template.porthole
    $ cat data.yml | porthole - template.porthole
    $ porthole -c template.porthole
    $ cat <<data | ruby porthole - template.porthole
    ---
    name: Bob
    age: 30
    ---
    data


## COPYRIGHT

Porthole is Copyright (C) 2009 Chris Wanstrath

Original CTemplate by Google


## SEE ALSO

porthole(5), gem(1),
<http://porthole.github.com/>
